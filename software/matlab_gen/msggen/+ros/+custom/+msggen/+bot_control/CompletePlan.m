classdef CompletePlan < ros.Message
    %CompletePlan MATLAB implementation of bot_control/CompletePlan
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2021 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'bot_control/CompletePlan' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '20232cc23a1bce3cc06150588605a7a0' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        BotControlPathArrayClass = ros.msg.internal.MessageFactory.getClassForType('bot_control/PathArray') % Dispatch to MATLAB class for message type bot_control/PathArray
    end
    
    properties (Dependent)
        Agent
    end
    
    properties (Access = protected)
        Cache = struct('Agent', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Agent'} % List of non-constant message properties
        ROSPropertyList = {'agent'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = CompletePlan(msg)
            %CompletePlan Construct the message object CompletePlan
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function agent = get.Agent(obj)
            %get.Agent Get the value for property Agent
            if isempty(obj.Cache.Agent)
                javaArray = obj.JavaMessage.getAgent;
                array = obj.readJavaArray(javaArray, obj.BotControlPathArrayClass);
                obj.Cache.Agent = feval(obj.BotControlPathArrayClass, array);
            end
            agent = obj.Cache.Agent;
        end
        
        function set.Agent(obj, agent)
            %set.Agent Set the value for property Agent
            if ~isvector(agent) && isempty(agent)
                % Allow empty [] input
                agent = feval([obj.BotControlPathArrayClass '.empty'], 0, 1);
            end
            
            validateattributes(agent, {obj.BotControlPathArrayClass}, {'vector'}, 'CompletePlan', 'Agent');
            
            javaArray = obj.JavaMessage.getAgent;
            array = obj.writeJavaArray(agent, javaArray, obj.BotControlPathArrayClass);
            obj.JavaMessage.setAgent(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Agent)
                obj.Cache.Agent = [];
                obj.Cache.Agent = obj.Agent;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Agent = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Agent = copy(obj.Agent);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            AgentCell = arrayfun(@(x) feval([obj.BotControlPathArrayClass '.loadobj'], x), strObj.Agent, 'UniformOutput', false);
            obj.Agent = vertcat(AgentCell{:});
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Agent = arrayfun(@(x) saveobj(x), obj.Agent);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.bot_control.CompletePlan.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.bot_control.CompletePlan;
            obj.reload(strObj);
        end
    end
end
