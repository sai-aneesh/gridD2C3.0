classdef PathArray < ros.Message
    %PathArray MATLAB implementation of bot_control/PathArray
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2021 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'bot_control/PathArray' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '0fefd5c363e3dd03ca4a47fa8a0d4523' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
    end
    
    properties (Dependent)
        BotNum
        Statei
    end
    
    properties (Access = protected)
        Cache = struct('Statei', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BotNum', 'Statei'} % List of non-constant message properties
        ROSPropertyList = {'bot_num', 'statei'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = PathArray(msg)
            %PathArray Construct the message object PathArray
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function botnum = get.BotNum(obj)
            %get.BotNum Get the value for property BotNum
            botnum = int16(obj.JavaMessage.getBotNum);
        end
        
        function set.BotNum(obj, botnum)
            %set.BotNum Set the value for property BotNum
            validateattributes(botnum, {'numeric'}, {'nonempty', 'scalar'}, 'PathArray', 'BotNum');
            
            obj.JavaMessage.setBotNum(botnum);
        end
        
        function statei = get.Statei(obj)
            %get.Statei Get the value for property Statei
            if isempty(obj.Cache.Statei)
                javaArray = obj.JavaMessage.getStatei;
                array = obj.readJavaArray(javaArray, obj.GeometryMsgsPointClass);
                obj.Cache.Statei = feval(obj.GeometryMsgsPointClass, array);
            end
            statei = obj.Cache.Statei;
        end
        
        function set.Statei(obj, statei)
            %set.Statei Set the value for property Statei
            if ~isvector(statei) && isempty(statei)
                % Allow empty [] input
                statei = feval([obj.GeometryMsgsPointClass '.empty'], 0, 1);
            end
            
            validateattributes(statei, {obj.GeometryMsgsPointClass}, {'vector'}, 'PathArray', 'Statei');
            
            javaArray = obj.JavaMessage.getStatei;
            array = obj.writeJavaArray(statei, javaArray, obj.GeometryMsgsPointClass);
            obj.JavaMessage.setStatei(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Statei)
                obj.Cache.Statei = [];
                obj.Cache.Statei = obj.Statei;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Statei = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.BotNum = obj.BotNum;
            
            % Recursively copy compound properties
            cpObj.Statei = copy(obj.Statei);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.BotNum = strObj.BotNum;
            StateiCell = arrayfun(@(x) feval([obj.GeometryMsgsPointClass '.loadobj'], x), strObj.Statei, 'UniformOutput', false);
            obj.Statei = vertcat(StateiCell{:});
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.BotNum = obj.BotNum;
            strObj.Statei = arrayfun(@(x) saveobj(x), obj.Statei);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.bot_control.PathArray.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.bot_control.PathArray;
            obj.reload(strObj);
        end
    end
end
