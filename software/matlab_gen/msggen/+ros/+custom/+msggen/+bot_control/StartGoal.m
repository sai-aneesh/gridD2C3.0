classdef StartGoal < ros.Message
    %StartGoal MATLAB implementation of bot_control/StartGoal
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2021 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'bot_control/StartGoal' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '7d7b8ce068bf2ec55f221943912adab7' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        StartX
        StartY
        StartD
        GoalX
        GoalY
        GoalD
        BotNum
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BotNum', 'GoalD', 'GoalX', 'GoalY', 'StartD', 'StartX', 'StartY'} % List of non-constant message properties
        ROSPropertyList = {'bot_num', 'goal_d', 'goal_x', 'goal_y', 'start_d', 'start_x', 'start_y'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = StartGoal(msg)
            %StartGoal Construct the message object StartGoal
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function startx = get.StartX(obj)
            %get.StartX Get the value for property StartX
            javaArray = obj.JavaMessage.getStartX;
            array = obj.readJavaArray(javaArray, 'int16');
            startx = int16(array);
        end
        
        function set.StartX(obj, startx)
            %set.StartX Set the value for property StartX
            if ~isvector(startx) && isempty(startx)
                % Allow empty [] input
                startx = int16.empty(0,1);
            end
            
            validateattributes(startx, {'numeric'}, {'vector'}, 'StartGoal', 'StartX');
            
            javaArray = obj.JavaMessage.getStartX;
            array = obj.writeJavaArray(startx, javaArray, 'int16');
            obj.JavaMessage.setStartX(array);
        end
        
        function starty = get.StartY(obj)
            %get.StartY Get the value for property StartY
            javaArray = obj.JavaMessage.getStartY;
            array = obj.readJavaArray(javaArray, 'int16');
            starty = int16(array);
        end
        
        function set.StartY(obj, starty)
            %set.StartY Set the value for property StartY
            if ~isvector(starty) && isempty(starty)
                % Allow empty [] input
                starty = int16.empty(0,1);
            end
            
            validateattributes(starty, {'numeric'}, {'vector'}, 'StartGoal', 'StartY');
            
            javaArray = obj.JavaMessage.getStartY;
            array = obj.writeJavaArray(starty, javaArray, 'int16');
            obj.JavaMessage.setStartY(array);
        end
        
        function startd = get.StartD(obj)
            %get.StartD Get the value for property StartD
            javaArray = obj.JavaMessage.getStartD;
            array = obj.readJavaArray(javaArray, 'int16');
            startd = int16(array);
        end
        
        function set.StartD(obj, startd)
            %set.StartD Set the value for property StartD
            if ~isvector(startd) && isempty(startd)
                % Allow empty [] input
                startd = int16.empty(0,1);
            end
            
            validateattributes(startd, {'numeric'}, {'vector'}, 'StartGoal', 'StartD');
            
            javaArray = obj.JavaMessage.getStartD;
            array = obj.writeJavaArray(startd, javaArray, 'int16');
            obj.JavaMessage.setStartD(array);
        end
        
        function goalx = get.GoalX(obj)
            %get.GoalX Get the value for property GoalX
            javaArray = obj.JavaMessage.getGoalX;
            array = obj.readJavaArray(javaArray, 'int16');
            goalx = int16(array);
        end
        
        function set.GoalX(obj, goalx)
            %set.GoalX Set the value for property GoalX
            if ~isvector(goalx) && isempty(goalx)
                % Allow empty [] input
                goalx = int16.empty(0,1);
            end
            
            validateattributes(goalx, {'numeric'}, {'vector'}, 'StartGoal', 'GoalX');
            
            javaArray = obj.JavaMessage.getGoalX;
            array = obj.writeJavaArray(goalx, javaArray, 'int16');
            obj.JavaMessage.setGoalX(array);
        end
        
        function goaly = get.GoalY(obj)
            %get.GoalY Get the value for property GoalY
            javaArray = obj.JavaMessage.getGoalY;
            array = obj.readJavaArray(javaArray, 'int16');
            goaly = int16(array);
        end
        
        function set.GoalY(obj, goaly)
            %set.GoalY Set the value for property GoalY
            if ~isvector(goaly) && isempty(goaly)
                % Allow empty [] input
                goaly = int16.empty(0,1);
            end
            
            validateattributes(goaly, {'numeric'}, {'vector'}, 'StartGoal', 'GoalY');
            
            javaArray = obj.JavaMessage.getGoalY;
            array = obj.writeJavaArray(goaly, javaArray, 'int16');
            obj.JavaMessage.setGoalY(array);
        end
        
        function goald = get.GoalD(obj)
            %get.GoalD Get the value for property GoalD
            javaArray = obj.JavaMessage.getGoalD;
            array = obj.readJavaArray(javaArray, 'int16');
            goald = int16(array);
        end
        
        function set.GoalD(obj, goald)
            %set.GoalD Set the value for property GoalD
            if ~isvector(goald) && isempty(goald)
                % Allow empty [] input
                goald = int16.empty(0,1);
            end
            
            validateattributes(goald, {'numeric'}, {'vector'}, 'StartGoal', 'GoalD');
            
            javaArray = obj.JavaMessage.getGoalD;
            array = obj.writeJavaArray(goald, javaArray, 'int16');
            obj.JavaMessage.setGoalD(array);
        end
        
        function botnum = get.BotNum(obj)
            %get.BotNum Get the value for property BotNum
            javaArray = obj.JavaMessage.getBotNum;
            array = obj.readJavaArray(javaArray, 'int16');
            botnum = int16(array);
        end
        
        function set.BotNum(obj, botnum)
            %set.BotNum Set the value for property BotNum
            if ~isvector(botnum) && isempty(botnum)
                % Allow empty [] input
                botnum = int16.empty(0,1);
            end
            
            validateattributes(botnum, {'numeric'}, {'vector'}, 'StartGoal', 'BotNum');
            
            javaArray = obj.JavaMessage.getBotNum;
            array = obj.writeJavaArray(botnum, javaArray, 'int16');
            obj.JavaMessage.setBotNum(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.StartX = obj.StartX;
            cpObj.StartY = obj.StartY;
            cpObj.StartD = obj.StartD;
            cpObj.GoalX = obj.GoalX;
            cpObj.GoalY = obj.GoalY;
            cpObj.GoalD = obj.GoalD;
            cpObj.BotNum = obj.BotNum;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.StartX = strObj.StartX;
            obj.StartY = strObj.StartY;
            obj.StartD = strObj.StartD;
            obj.GoalX = strObj.GoalX;
            obj.GoalY = strObj.GoalY;
            obj.GoalD = strObj.GoalD;
            obj.BotNum = strObj.BotNum;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.StartX = obj.StartX;
            strObj.StartY = obj.StartY;
            strObj.StartD = obj.StartD;
            strObj.GoalX = obj.GoalX;
            strObj.GoalY = obj.GoalY;
            strObj.GoalD = obj.GoalD;
            strObj.BotNum = obj.BotNum;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.bot_control.StartGoal.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.bot_control.StartGoal;
            obj.reload(strObj);
        end
    end
end
